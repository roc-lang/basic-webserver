on:
  pull_request:
  workflow_dispatch:

# this cancels workflows currently in progress if you start a new one
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Do not add permissions here! Configure them at the job level!
permissions: {}

defaults:
  run:
    shell: bash # need to specify this when using `container:` below

env:
  JUMP_START: 1
  ROC: ./roc_nightly/roc
  EXAMPLES_DIR: ./examples/

jobs:
  get-rust-version:
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.get-version.outputs.rust-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Rust version from toolchain file
        id: get-version
        run: |
          RUST_VERSION=$(grep 'channel = ' rust-toolchain.toml | sed 's/channel = "\(.*\)"/\1/')
          echo "rust-version=$RUST_VERSION" >> $GITHUB_OUTPUT

  build-and-test:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.os == 'ubuntu-24.04-arm' && format('rust:{0}-bookworm', needs.get-rust-version.outputs.rust-version) || null }}
    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm, macos-15]
    needs: get-rust-version
    steps:
      - uses: actions/checkout@v4

      - name: Downloading latest roc nightly
        run: |
          if [[ "${{ runner.os }}-${{ runner.arch }}" == "Linux-ARM64" ]]; then
            curl -fOL https://github.com/roc-lang/roc/releases/download/nightly/roc_nightly-linux_arm64-latest.tar.gz
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            curl -fOL https://github.com/roc-lang/roc/releases/download/nightly/roc_nightly-macos_apple_silicon-latest.tar.gz
          elif [[ "${{ runner.os }}-${{ runner.arch }}" == "Linux-X64" ]]; then
            curl -fOL https://github.com/roc-lang/roc/releases/download/nightly/roc_nightly-linux_x86_64-latest.tar.gz
          else
            echo "Unrecognized OS/arch combination: ${{ runner.os }}-${{ runner.arch }}"
            exit 1
          fi

      - name: rename nightly tar
        run: mv $(ls | grep "roc_nightly.*tar\.gz") roc_nightly.tar.gz

      - name: decompress the tar
        run: tar -xzf roc_nightly.tar.gz

      - run: rm roc_nightly.tar.gz

      - name: simplify nightly folder name
        run: mv roc_nightly* roc_nightly

      - run: ./roc_nightly/roc version

      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt install -y expect ncat ripgrep

      - name: Install dependencies (macOS)
        if: startsWith(matrix.os, 'macos-')
        run: |
          brew install expect # expect for testing
          brew install nmap  # includes ncat, for use as test server for tests/tcp.roc
          brew install ripgrep # ripgrep for ci/check_all_exposed_funs_tested.roc

      # Run all tests
      # TODO re-enable - run: ./ci/all_tests.sh

      - name: Install dependencies for musl build
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          if [[ "${{ matrix.os }}" == *"-arm" ]]; then
            rustup target add aarch64-unknown-linux-musl
          else
            sudo apt-get install -y musl-tools
            rustup target add x86_64-unknown-linux-musl
          fi

      - name: Test building with musl target
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
          if [[ "${{ matrix.os }}" == *"-arm" ]]; then
            CARGO_BUILD_TARGET=aarch64-unknown-linux-musl ./roc_nightly/roc build.roc -- --roc ./roc_nightly/roc
          else
            CARGO_BUILD_TARGET=x86_64-unknown-linux-musl ./roc_nightly/roc build.roc -- --roc ./roc_nightly/roc
          fi
          

      - name: Test using musl build
        if: startsWith(matrix.os, 'ubuntu-')
        run: |
            # no need to build platform anymore
            NO_BUILD=1 IS_MUSL=1 ./ci/all_tests.sh

# TODO clippy, rustfmt, roc fmt check
